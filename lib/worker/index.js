// Generated by CoffeeScript 1.3.3
(function() {
  var WORKER_COUNT, child_process, path;

  child_process = require('child_process');

  path = require('path');

  WORKER_COUNT = process.env.PRO_WORKERS || require('os').cpus().length;

  exports.WorkerQueue = (function() {

    function WorkerQueue(num_workers) {
      var i;
      if (num_workers == null) {
        num_workers = WORKER_COUNT;
      }
      this.queue = [];
      this.workers = (function() {
        var _i, _results,
          _this = this;
        _results = [];
        for (i = _i = 0; 0 <= num_workers ? _i < num_workers : _i > num_workers; i = 0 <= num_workers ? ++_i : --_i) {
          _results.push((function() {
            var worker;
            worker = child_process.fork(path.join(__dirname, 'slave'));
            worker.on('message', function(msg) {
              return _this.handleMessage(worker, msg);
            });
            return worker;
          })());
        }
        return _results;
      }).call(this);
      this.freeWorkers = this.workers.slice(0);
      this.activeJobs = {};
    }

    WorkerQueue.prototype.queueJob = function(jobName, data, cb) {
      this.queue.push([jobName, data, cb]);
      return this.checkJobs();
    };

    WorkerQueue.prototype.checkJobs = function() {
      var job, worker;
      if (this.queue.length && this.freeWorkers.length) {
        job = this.queue.shift();
        worker = this.freeWorkers.shift();
        worker.send({
          job: job[0],
          data: job[1]
        });
        return this.activeJobs[worker.pid] = job;
      }
    };

    WorkerQueue.prototype.handleMessage = function(worker, msg) {
      var cb, job;
      job = this.activeJobs[worker.pid];
      cb = job[2];
      if (msg.status === 'error') {
        cb(msg.error);
      } else {
        cb(null, msg.result);
      }
      this.freeWorkers.push(worker);
      return this.checkJobs();
    };

    return WorkerQueue;

  })();

}).call(this);
