// Generated by CoffeeScript 1.3.3
(function() {
  var FileRegistry, compilers, exports, fs, pathUtils, utils, watch, worker;

  fs = require('fs');

  pathUtils = require('path');

  watch = require('watch');

  compilers = require('./compilers');

  utils = require('./utils');

  worker = require('./worker');

  FileRegistry = (function() {

    function FileRegistry() {
      this.dependencies = {};
      this.workers = new worker.WorkerQueue();
      this.source = process.env.PRO_SOURCE;
      this.target = process.env.PRO_TARGET;
      this.sources = {};
      this.targetDeps = {};
      this.shouldWatch = !process.env.PRO_JUST_BUILD;
    }

    FileRegistry.prototype.addFile = function(path, stats, cb) {
      var compiler, job, sourcePath, targetPath,
        _this = this;
      this.sources[path] = stats;
      sourcePath = pathUtils.join(this.source, path);
      if (this.shouldWatch) {
        utils.watchit(sourcePath, function(e) {
          if (e !== 'change') {
            return;
          }
          return fs.stat(sourcePath, function(e, stats) {
            return this.sources[path] = stats;
          });
        });
      }
      if (utils.isPrivate(path)) {
        return cb();
      }
      compiler = compilers.forFile(path);
      if (compiler.compilesTo) {
        path = utils.newext(path, compiler.compilesTo);
      }
      targetPath = pathUtils.join(this.target, path);
      job = {
        source: sourcePath,
        target: targetPath,
        options: {
          filename: sourcePath
        }
      };
      utils.log("info", "Building " + path);
      return this.workers.queueJob("compile", job, function(e, result) {
        if (e) {
          utils.logError(e);
        } else {
          _this.dependencies[path] = result.dependencies;
        }
        return cb(e);
      });
    };

    FileRegistry.prototype.initialize = function() {
      var deps, s, stat, t, target, _ref, _ref1, _results,
        _this = this;
      _ref = this.sources;
      for (s in _ref) {
        stat = _ref[s];
        target = this.findTarget(s);
        if (target) {
          if (!(target in this.targetDeps) || this.targetDeps[target][0] !== path) {
            this.targetDeps[target] = [path];
          }
        }
      }
      _ref1 = this.targetDeps;
      _results = [];
      for (t in _ref1) {
        deps = _ref1[t];
        _results.push((function(t, deps) {
          return fs.stat(pathUtils.join(_this.target, t), function(e, tStat) {
            var tTime;
            return tTime = tStat != null ? tStat.mtime : void 0;
          });
        })(t, deps));
      }
      return _results;
    };

    FileRegistry.prototype.findTarget = function(path) {
      var compiler;
      if (utils.isPrivate(path)) {
        return null;
      }
      compiler = compilers.forFile(source);
      if (compiler.compilesTo) {
        path = utils.newext(path, compiler.compilesTo);
      }
      return path;
    };

    FileRegistry.prototype.scan = function(cb) {
      var options,
        _this = this;
      options = {
        ignoreDotFiles: true,
        filter: function(f) {
          return true;
        }
      };
      return watch.watchTree(this.source, options, function(f, curr, prev) {
        if (!curr) {
          _this.sources = f;
          return _this.initialize();
        }
      });
    };

    return FileRegistry;

  })();

  exports = module.exports = FileRegistry;

  exports.ignore = ['node_modules', '_build'];

}).call(this);
