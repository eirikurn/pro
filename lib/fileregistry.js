// Generated by CoffeeScript 1.3.3
(function() {
  var FileRegistry, compilers, exports, fs, pathUtils, utils, worker;

  fs = require('fs');

  pathUtils = require('path');

  compilers = require('./compilers');

  utils = require('./utils');

  worker = require('./worker');

  FileRegistry = (function() {

    function FileRegistry() {
      this.dependencies = {};
      this.workers = new worker.WorkerQueue();
      this.source = process.env.PRO_SOURCE;
      this.target = process.env.PRO_TARGET;
      this.sources = {};
      this.shouldWatch = !process.env.PRO_JUST_BUILD;
    }

    FileRegistry.prototype.addFile = function(path, stats, cb) {
      var compiler, job, sourcePath, targetPath,
        _this = this;
      this.sources[path] = stats;
      sourcePath = pathUtils.join(this.source, path);
      if (this.shouldWatch) {
        utils.watchit(sourcePath, function(e) {
          if (e !== 'change') {
            return;
          }
          return fs.stat(sourcePath, function(e, stats) {
            return this.sources[path] = stats;
          });
        });
      }
      if (utils.isPrivate(path)) {
        return cb();
      }
      compiler = compilers.forFile(path);
      if (compiler.compilesTo) {
        path = utils.newext(path, compiler.compilesTo);
      }
      targetPath = pathUtils.join(this.target, path);
      job = {
        source: sourcePath,
        target: targetPath,
        options: {
          filename: sourcePath
        }
      };
      utils.log("info", "Building " + path);
      return this.workers.queueJob("compile", job, function(e, result) {
        if (e) {
          utils.logError(e);
        } else {
          _this.dependencies[path] = result.dependencies;
        }
        return cb(e);
      });
    };

    FileRegistry.prototype.scan = function(cb) {
      return utils.iterateFolder(this.source, exports.ignore, this.addFile.bind(this), cb);
    };

    return FileRegistry;

  })();

  exports = module.exports = FileRegistry;

  exports.ignore = ['node_modules', '_build'];

}).call(this);
